// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import { WrappedEther } from "../src/WrappedEther.sol";

abstract contract Base_Test is Test {
    ////////////////////////////////////////////////////////////////////////////
    // Actor
    ////////////////////////////////////////////////////////////////////////////

    Account internal alice;

    Account internal bob;

    ////////////////////////////////////////////////////////////////////////////
    // Test Contracts
    ////////////////////////////////////////////////////////////////////////////

    WrappedEther internal weth;

    ////////////////////////////////////////////////////////////////////////////
    // Setup
    ////////////////////////////////////////////////////////////////////////////

    function setUp() public virtual {
        // deploy contracts
        weth = new WrappedEther();

        // label
        vm.label({ account: address(weth), newLabel: "WETH" });

        // setup actors
        alice = makeAccount("Alice");
        bob = makeAccount("Bob");

        // deal
        vm.deal(alice.addr, 1000 ether);
    }

    ////////////////////////////////////////////////////////////////////////////
    // Helper
    ////////////////////////////////////////////////////////////////////////////

    modifier prankAlice() {
        vm.startPrank(alice.addr);
        _;
        vm.stopPrank;
    }

    modifier prankBob() {
        vm.startPrank(bob.addr);
        _;
        vm.stopPrank;
    }
}
